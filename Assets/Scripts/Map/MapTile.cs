using System;using System.Collections.Generic;using UnityEngine;public class MapTile{	private Lnglat center;	//图块中心经纬度	private double leftlng, rightlng, toplat, bottomlat;	//private double H_LAT, W_LNG;	//private float HEIGHT, WIDTH;	private GameObject quad;	private Texture2D mapTexture;	//图块纹理	private bool isShown;	private  bool isDownloading;	public MapTile(Lnglat lnglat)	{		center = lnglat;		//calculate corner		leftlng = center.GetLngFromPix (-512);		rightlng = center.GetLngFromPix (512);		toplat = center.GetLatFromPix (512);		bottomlat = center.GetLatFromPix (-512);		isDownloading = true;	}	public bool IsDownloading {		get {return isDownloading;}		set { isDownloading = value;}	}	public Texture2D Texture {		get { return mapTexture;}		set { mapTexture = value;}	}	public GameObject Quad {		get { return quad;}		set {quad = value;}	}	public Vector3 GetBastionPosition(Lnglat lnglat) {		double dlng = lnglat.Longitude - center.Longitude;		double dlat = lnglat.Latitude - center.Latitude;		return new Vector3((float)(dlng/(rightlng-leftlng)) , (float)(dlat/(toplat-bottomlat)), -0.25f);	}	private bool Contains(Lnglat lnglat) {		return (lnglat.Longitude > leftlng && 			lnglat.Longitude < rightlng &&			lnglat.Latitude > bottomlat && 			lnglat.Latitude < toplat);	}	private const int CACHE_SIZE = 16;	private static List<MapTile> cache = new List<MapTile>(CACHE_SIZE);	public static MapTile FindFromCache(Lnglat lnglat) {		foreach (MapTile tile in cache) {			if(tile.Contains(lnglat)) {				return tile;			}		}		return null;	}	public static MapTile LoadFromFile(Lnglat lnglat) {		//TODO		return null;	}	public static bool CacheContains(Lnglat lnglat) {		foreach (MapTile tile in cache) {			if(tile.Contains(lnglat)) {				return true;			}		}		return false;	}	public static void AddToCache(MapTile tile, int index) {		cache.Add (tile);		//cache [index] = tile;	}}