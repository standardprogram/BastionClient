//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.//     Runtime Version:4.0.30319.18408////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------using System;using System.Collections.Generic;using UnityEngine;public class MapTile{	//H_LAT = 1024/1030/ 111.31955;	private const int CACHE_SIZE = 18;	private Location center;	//图块中心经纬度	private double H_LAT, W_LNG;	private float HEIGHT, WIDTH;	private GameObject quad;	private Texture2D mapTexture;	//图块纹理	private bool isShown;	private  bool isDownloading;	public MapTile (Location location, Texture2D texture)	{		center = location;		mapTexture = texture;		isShown = false;		H_LAT = 0.0089308190455455f;		W_LNG = H_LAT * Mathf.Cos(center.Latitude * Math.PI / 180);		HEIGHT = (float)0.9941747572815534f;		WIDTH = (float) HEIGHT * Mathf.Cos(center.Latitude * Math.PI / 180);	}	public Location Center {		get { return center;}	}	public Texture2D Texture {		get { return mapTexture;}	}	public GameObject Quad {		get { return quad;}	}	private double GetLongitudeFromPixel(int pxNum) {	}	private double GetLatitudeFromPixel(int pxNum) {	}	public Vector3 GetBastionPosition(Location location) {		float dlng = location.Longitude - center.Longitude;		float dlat = location.Latitude - center.Latitude;		return new Vector3(dlng/W_LNG , dlat/H_LAT, -0.25f);	}	private static List<MapTile> cache = new List<MapTile>();	public static MapTile FindMapTile(Location location) {		float min = float.MaxValue;		MapTile nearest = null;		foreach (MapTile tile in cache) {			if(tile.center.IsNearbyWith(location)) {				float distance = location.GetSimpleDistance(tile.Center);				if(distance < min) {					min = distance;					nearest = tile;				}			}		}		return nearest;	}	public static MapTile LoadFromFile(Location location) {		//TODO		return null;	}	public static void AddToCache(MapTile tile) {		cache.Add(tile);		while(cache.Count > 18) {			cache.Remove(0);		}	}}