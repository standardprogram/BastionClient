// ------------------------------------------------------------------------------//  <autogenerated>//      This code was generated by a tool.//      Mono Runtime Version: 4.0.30319.1// //      Changes to this file may cause incorrect behavior and will be lost if //      the code is regenerated.//  </autogenerated>// ------------------------------------------------------------------------------using System;using LitJson;public class Lnglat{	private const double LAT_PER_PX = 0.00894576577084826923213937968996;	// 1024/1030/(40008.08/360) 子午线周长	private const double LNG_PER_PX = 0.00893067151968298054184882294723;	//1024/1030/(40075.7/360) 赤道周长	private const double EARTH_RADIUS = 6371.012;	//平均半径	private double latitude, longitude;	public Lnglat(JsonData jdata) {		latitude = double.Parse(jdata ["lat"].ToString());		longitude = double.Parse(jdata ["lng"].ToString());	}		public Lnglat (double lng, double lat) 	{		longitude = lng;		latitude = lat;	}	public double Latitude {		get { return latitude;}	}	public double Longitude {		get {return longitude;}	}	public string toString() {		return string.Format ("location={0},{1}", longitude, latitude);	}	public double GetLngFromPix(int px) {		return px * LNG_PER_PX * Math.Cos(latitude * Math.PI / 180);	}	public double GetLatFromPix(int px) {		return px * LAT_PER_PX;	}		public double GetDistance(Lnglat other) {		double radLat1 = Radians (latitude);		double radLat2 = Radians (other.Latitude);		double a = radLat1 - radLat2;		double b = Radians (longitude) - Radians(other.Longitude);						double s = 2 * Math.Asin (Math.Sqrt (Math.Pow (Math.Sin (a / 2), 2) 			+ Math.Cos (radLat1) * Math.Cos (radLat2) * Math.Pow (Math.Sin (b / 2), 2)));						s = s * EARTH_RADIUS;		s = Math.Round(s*10000)/10000;		return s;	}	private double Radians(double degrees)	{		double radians = (Math.PI / 180) * degrees;		return (radians);	}}